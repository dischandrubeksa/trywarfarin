from flask import Flask, request, abort
from linebot.v3.messaging import (
    MessagingApi, Configuration, ApiClient,
    TextMessage, MessageAction, CarouselColumn, CarouselTemplate, TemplateMessage, ReplyMessageRequest
)
from linebot.v3.webhook import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.webhooks import MessageEvent, TextMessageContent
from linebot.models import QuickReplyButton, PostbackAction
import os
import re
import math
import random
import logging

DRUG_DATABASE = {
    "Amoxicillin": {
        "concentration_mg_per_ml": 250 / 5,
        "bottle_size_ml": 60,
        "indications": {
            "Pharyngitis/Tonsillitis": [
                {
                    "sub_indication": "Group A Streptococcus",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": [1, 2],
                    "duration_days": 10,
                    "max_mg_per_day": 1000,
                    "note": "üìå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á √ó 10 ‡∏ß‡∏±‡∏ô ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å"
                }
            ],
            "Otitis media, acute (AOM)": [
                {
                    "label": "High-dose regimen",
                    "dose_mg_per_kg_per_day": [80, 90],
                    "frequency": 2,
                    "duration_days": 10,
                    "max_mg_per_day": 4000,
                    "note": "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÉ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ S. pneumoniae ‡∏î‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏ô‡∏ô‡∏¥‡∏ã‡∏¥‡∏•‡∏•‡∏¥‡∏ô"
                },
                {
                    "label": "Standard-dose regimen",
                    "dose_mg_per_kg_per_day": [40, 50],
                    "frequency": 2,
                    "duration_days": 7,
                    "max_mg_per_day": 1500,
                    "note": "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ S. pneumoniae ‡∏î‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠ penicillin < 10% ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                }
            ],
            "Pneumonia, community acquired": [
                {
                    "label": "Empiric therapy (bacterial pneumonia)",
                    "dose_mg_per_kg_per_day": 90,
                    "frequency": 2,
                    "duration_days": 5,
                    "max_mg_per_day": 4000
                },
                {
                    "label": "Group A Streptococcus, mild",
                    "dose_mg_per_kg_per_day": [50, 75],
                    "frequency": 2,
                    "duration_days": 7,
                    "max_mg_per_day": 4000
                },
                {
                    "label": "H. influenzae, mild",
                    "dose_mg_per_kg_per_day": [75, 100],
                    "frequency": 3,
                    "duration_days": 7,
                    "max_mg_per_day": 4000
                },
                {
                    "label": "S. pneumoniae, MIC ‚â§2",
                    "dose_mg_per_kg_per_day": 90,
                    "frequency": [2, 3],
                    "duration_days": 7,
                    "max_mg_per_day": 4000,
                    "note": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ï‡∏≤‡∏° MIC: 12 ‡∏ä‡∏° ‡∏´‡∏£‡∏∑‡∏≠ 8 ‡∏ä‡∏°"
                },
                {
                    "label": "S. pneumoniae, MIC = 2 mcg/mL",
                    "dose_mg_per_kg_per_day": [90, 100],
                    "frequency": 3,
                    "duration_days": 7,
                    "max_mg_per_day": 4000,
                    "note": "‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ time > MIC ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
                }
            ],
            "Anthrax": [
                {
                    "title": "Postexposure prophylaxis, exposure to aerosolized spores",
                    "dose_mg_per_kg_per_day": 75,
                    "frequency": 3,
                    "duration_days": 60,
                    "max_mg_per_dose": 1000
                },
                {
                    "title": "Cutaneous, without systemic involvement",
                    "dose_mg_per_kg_per_day": 75,
                    "frequency": 3,
                    "duration_days_range": [7, 10],
                    "max_mg_per_dose": 1000,
                    "note": "‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ naturally acquired infection"
                },
                {
                    "title": "Systemic, oral step-down therapy",
                    "dose_mg_per_kg_per_day": 75,
                    "frequency": 3,
                    "duration_days": 60,
                    "max_mg_per_dose": 1000,
                    "note": "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á combination therapy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 60 ‡∏ß‡∏±‡∏ô"
                }
            ],
            "Helicobacter pylori eradication": [
                {
                    "name": "Standard-dose (weight-based)",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 2,
                    "duration_days": 14,
                    "max_mg_per_dose": 1000,
                    "note": "‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏° guideline"
                },
                {
                    "name": "Standard-dose (fixed dosing)",
                    "fixed_dose_by_weight": [
                        {"min_weight": 15, "max_weight": 24.9, "dose_mg": 500},
                        {"min_weight": 25, "max_weight": 34.9, "dose_mg": 750},
                        {"min_weight": 35, "max_weight": 999, "dose_mg": 1000}
                    ],
                    "frequency": 2,
                    "duration_days": 14,
                    "note": "Fixed dosing ‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ä‡πà‡∏ß‡∏á (twice daily √ó 14 ‡∏ß‡∏±‡∏ô)"
                },
                {
                    "name": "High-dose (fixed dosing)",
                    "fixed_dose_by_weight": [
                        {"min_weight": 15, "max_weight": 24.9, "dose_mg": 750},
                        {"min_weight": 25, "max_weight": 34.9, "dose_mg": 1000},
                        {"min_weight": 35, "max_weight": 999, "dose_mg": 1500}
                    ],
                    "frequency": 2,
                    "duration_days": 14,
                    "note": "‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏ì‡∏µ‡∏î‡∏∑‡πâ‡∏≠ clarithromycin ‡πÅ‡∏•‡∏∞ metronidazole"
                }
            ],
            "Lyme disease (Borrelia spp. infection)": [
                {
                    "name": "Erythema migrans / Borrelial lymphocytoma",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 3,
                    "duration_days": 14,
                    "max_mg_per_dose": 500,
                    "note": "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡∏≤‡∏ô 14 ‡∏ß‡∏±‡∏ô"
                },
                {
                    "name": "Carditis",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 3,
                    "duration_days": 21,
                    "max_mg_per_dose": 500,
                    "note": "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡∏≤‡∏ô 14‚Äì21 ‡∏ß‡∏±‡∏ô"
                },
                {
                    "name": "Arthritis (initial, recurrent, or refractory)",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 3,
                    "duration_days": 28,
                    "max_mg_per_dose": 500,
                    "note": "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡∏≤‡∏ô 28 ‡∏ß‡∏±‡∏ô"
                },
                {
                    "name": "Acrodermatitis chronica atrophicans",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 3,
                    "duration_days": 28,
                    "max_mg_per_dose": 500,
                    "note": "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡∏≤‡∏ô 21‚Äì28 ‡∏ß‡∏±‡∏ô"
                }
            ],
            "Urinary tract infection": [
                {
                    "sub_indication": "Infants",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 2,
                    "duration_days": 7,
                    "note": "üìå ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏ï‡πà‡∏≠ amoxicillin"
                },
                {
                    "sub_indication": "Infants (severe)",
                    "dose_mg_per_kg_per_day": 100,
                    "frequency": 2,
                    "duration_days": 10,
                    "note": "üìå ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ moderate/severe infection"
                },
                {
                    "sub_indication": "Children and Adolescents",
                    "dose_mg_per_kg_per_day": 50,
                    "frequency": 3,
                    "duration_days": 7,
                    "max_mg_per_dose": 500,
                    "note": "üìå ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 7‚Äì14 ‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 3‚Äì5 ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô cystitis ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (‚â•2 ‡∏õ‡∏µ)"
                },
                {
                    "sub_indication": "Children and Adolescents (high dose)",
                    "dose_mg_per_kg_per_day": 100,
                    "frequency": 3,
                    "duration_days": 10,
                    "max_mg_per_dose": 500,
                    "note": "üìå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö moderate/severe infection ‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤"
                },
                {
                    "sub_indication": "Children (uncomplicated cystitis)",
                    "dose_mg_per_kg_per_day": 30,
                    "frequency": 3,
                    "duration_days": 3,
                    "note": "üìå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å ‚â•2 ‡∏õ‡∏µ ‡∏ó‡∏µ‡πà‡∏°‡∏µ uncomplicated cystitis"
                }
            ],
            "Rhinosinusitis": [
                {
                    "sub_indication": "Standard-dose regimen (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà S. pneumoniae ‡πÑ‡∏ß‡∏ï‡πà‡∏≠ penicillin)",
                    "dose_mg_per_kg_per_day": 45,
                    "frequency": 2,
                    "duration_days": 10,
                    "note": "üìå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏õ‡∏è‡∏¥‡∏ä‡∏µ‡∏ß‡∏ô‡∏∞‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å (AAP guideline)"
                },
                {
                    "sub_indication": "High-dose regimen (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà S. pneumoniae ‡∏î‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠ penicillin ‚â•10%)",
                    "dose_mg_per_kg_per_day": 80,
                    "frequency": 2,
                    "duration_days": 10,
                    "max_mg_per_dose": 2000,
                    "note": "üìå ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏î‡∏¢ IDSA ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏î‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å"
                }
            ]
        }
    },
    "Cephalexin": {
        "concentration_mg_per_ml": 125 / 5,
        "bottle_size_ml": 60,
        "indications": {
            "SSTI": {"dose_mg_per_kg_per_day": 50, "frequency": 4, "duration_days": 7, "max_mg_per_day": None},
            "Pharyngitis": {"dose_mg_per_kg_per_day": 50, "frequency": 2, "duration_days": 10, "max_mg_per_day": None},
            "UTI": {"dose_mg_per_kg_per_day": 100, "frequency": 4, "duration_days": 7, "max_mg_per_day": None}
        }
    },
    "Cefdinir": {
        "concentration_mg_per_ml": 125 / 5,
        "bottle_size_ml": 30,
        "indications": {
            "Otitis Media": {"dose_mg_per_kg_per_day": 14, "frequency": 2, "duration_days": 10, "max_mg_per_day": 600},
            "Pharyngitis": {"dose_mg_per_kg_per_day": 14, "frequency": 2, "duration_days": 10, "max_mg_per_day": 600},
            "Rhinosinusitis": {"dose_mg_per_kg_per_day": 14, "frequency": 2, "duration_days": 10, "max_mg_per_day": 600}
        }
    },
    "Cefixime": {
        "concentration_mg_per_ml": 100 / 5,
        "bottle_size_ml": 30,
        "indications": {
            "Febrile Neutropenia": {"dose_mg_per_kg_per_day": 8, "frequency": 1, "duration_days": 7, "max_mg_per_day": 400},
            "Otitis Media": {"dose_mg_per_kg_per_day": 8, "frequency": 1, "duration_days": 7, "max_mg_per_day": 400},
            "Rhinosinusitis": {"dose_mg_per_kg_per_day": 8, "frequency": 1, "duration_days": 7, "max_mg_per_day": 400},
            "Strep Pharyngitis": {"dose_mg_per_kg_per_day": 8, "frequency": 1, "duration_days": 10, "max_mg_per_day": 400},
            "Typhoid Fever": {"dose_mg_per_kg_per_day": 17.5, "frequency": 2, "duration_days": 10, "max_mg_per_day": None},
            "UTI": {"dose_mg_per_kg_per_day": 8, "frequency": 2, "duration_days": 7, "max_mg_per_day": 400}
        }
    },
    "Augmentin": {
        "concentration_mg_per_ml": 600 / 5,
        "bottle_size_ml": 70,
        "indications": {
            "Impetigo": {"dose_mg_per_kg_per_day": 35, "frequency": 2, "duration_days": 7, "max_mg_per_day": 500},
            "Osteoarticular Infection": {  "dose_mg_per_kg_per_day": 120,"frequency": 3, "duration_days": 21,"max_mg_per_day": 1000 },
            "Otitis Media": {"dose_mg_per_kg_per_day": 85,"frequency": 2, "duration_days": 10, "max_mg_per_day": 2000 },
            "Pneumonia": { "dose_mg_per_kg_per_day": 90,"frequency": 2, "duration_days": 7, "max_mg_per_day": 2000 },
            "Rhinosinusitis": {"dose_mg_per_kg_per_day": 90,"frequency": 2,"duration_days": 10,"max_mg_per_day": 2000 },
            "Strep Carriage": { "dose_mg_per_kg_per_day": 40, "frequency": 3, "duration_days": 10,"max_mg_per_day": 2000 },
            "UTI": { "dose_mg_per_kg_per_day": 35, "frequency": 2, "duration_days": 7, "max_mg_per_day": 1750 }
        }
    },
    "Azithromycin": {
        "concentration_mg_per_ml": 200 / 5,
        "bottle_size_ml": 15,
        "indications": {
            "Pertussis": [
                {"day_range": "Day 1", "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 1, "max_mg_per_day": 500},
                {"day_range": "Day 2‚Äì5", "dose_mg_per_kg_per_day": 5, "frequency": 1, "duration_days": 4, "max_mg_per_day": 250}
            ],
            "Pneumonia (Atypical)": [
                {"day_range": "Day 1", "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 1, "max_mg_per_day": 500},
                {"day_range": "Day 2‚Äì5", "dose_mg_per_kg_per_day": 5, "frequency": 1, "duration_days": 4, "max_mg_per_day": 250}
            ],
            "Strep Pharyngitis": {
                "dose_mg_per_kg_per_day": 12, "frequency": 1, "duration_days": 5, "max_mg_per_dose": 500
            },
            "Typhoid Fever": {
                "dose_mg_per_kg_per_day": 15, "frequency": 1, "duration_days": 7, "max_mg_per_dose": 1000
            },
            "UTI (Off-label)": {
                "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 3, "max_mg_per_dose": 500
            },
            "Rhinosinusitis": {
                "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 3, "max_mg_per_dose": 500
            },
            "Chlamydia": {
                "dose_mg_per_kg_per_day": 20, "frequency": 1, "duration_days": 1, "max_mg_per_dose": 1000
            },
            "Diarrhea (Campylobacter)": {
                "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 3, "max_mg_per_dose": 500
            },
            "Diarrhea (Shigella)": [
                {"day_range": "Day 1", "dose_mg_per_kg_per_day": 12, "frequency": 1, "duration_days": 1, "max_mg_per_day": 500},
                {"day_range": "Day 2‚Äì5", "dose_mg_per_kg_per_day": 5, "frequency": 1, "duration_days": 4, "max_mg_per_day": 250}
            ],
            "Cholera": {
                "dose_mg_per_kg_per_day": 20, "frequency": 1, "duration_days": 1, "max_mg_per_dose": 1000
            },
            "Babesiosis": [
                {"day_range": "Day 1", "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 1, "max_mg_per_day": 500},
                {"day_range": "Day 2‚Äì5", "dose_mg_per_kg_per_day": 5, "frequency": 1, "duration_days": 4, "max_mg_per_day": 250}
            ],
            "Cat Scratch Disease": [
                {"day_range": "Day 1", "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 1, "max_mg_per_day": 500},
                {"day_range": "Day 2‚Äì5", "dose_mg_per_kg_per_day": 5, "frequency": 1, "duration_days": 4, "max_mg_per_day": 250}
            ],
            "MAC (Mycobacterium avium, prophylaxis)": {
                "dose_mg_per_kg_per_day": 20, "frequency": 1, "duration_days": 7, "max_mg_per_dose": 1200
            },
            "NTM Pulmonary Infection": {
                "dose_mg_per_kg_per_day": 10, "frequency": 1, "duration_days": 14, "max_mg_per_dose": 500
            },
            "Cystic Fibrosis (maintenance)": {
                "dose_mg_per_kg_per_day": 10, "frequency": 3, "duration_days": 14, "max_mg_per_dose": 500
            },
            "Asthma (Adjunct)": {
                "dose_mg_per_kg_per_day": 10, "frequency": 3, "duration_days": 14, "max_mg_per_dose": 500
            },
            "Other": "INDICATION_OTHERS"
        },
        "common_indications": ["Pneumonia (Atypical)", "Strep Pharyngitis","Rhinosinusitis","Chlamydia" ]
    }
}


logging.basicConfig(
    level=logging.INFO,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô DEBUG ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ log ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    format='[%(asctime)s] %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # ‡∏û‡∏¥‡∏°‡∏û‡πå log ‡πÑ‡∏õ‡∏¢‡∏±‡∏á stdout (‡πÄ‡∏ä‡πà‡∏ô Render, Cloud Run ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô)
    ]
)

app = Flask(__name__)

LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")

if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    raise ValueError("Missing LINE_CHANNEL_ACCESS_TOKEN or LINE_CHANNEL_SECRET")

configuration = Configuration(access_token=LINE_CHANNEL_ACCESS_TOKEN)
api_client = ApiClient(configuration)
messaging_api = MessagingApi(api_client)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

user_drug_selection = {}
user_sessions = {}
user_ages = {}


SPECIAL_DRUGS = {
    "Paracetamol": {
    "concentration_mg_per_ml": 120 / 5,
    "bottle_size_ml": 60,
    "indications": {
        "Fever": [
            {
                "min_age_years": 0,
                "max_age_years": 6,
                "dose_mg_per_kg_per_day": 60,
                "frequency": 4,
                "duration_days": 3,
                "max_mg_per_dose": 250
            },
            {
                "min_age_years": 6,
                "max_age_years": 18,
                "dose_mg_per_kg_per_day": 60,
                "frequency": 4,
                "duration_days": 3,
                "max_mg_per_dose": 500
            }
        ]
    },
    "common_indications": ["Fever"]
    },
    "Cetirizine": {
    "concentration_mg_per_ml": 5 / 5,
    "bottle_size_ml": 60,
    "indications": {
      "Allergic rhinitis, perennial": {
        "6_to_11_months": {
          "dose_mg": 2.5,
          "frequency": 1,
          "max_mg_per_day": 2.5
        },
        "12_to_23_months": {
          "initial_dose_mg": 2.5,
          "frequency": 1,
          "max_frequency": 2,
          "max_mg_per_day": 5
        }
      },
      "Allergic symptoms, hay fever": {
        "2_to_5_years": {
          "initial_dose_mg": 2.5,
          "frequency": 1,
          "options": [
            {"dose_mg": 2.5, "frequency": 2},
            {"dose_mg": 5, "frequency": 1}
          ],
          "max_mg_per_day": 5
        },
        "above_or_equal_6": {
          "dose_mg_range": [5, 10],
          "frequency": 1,
          "max_mg_per_day": 10
        }
      },
      "Anaphylaxis (adjunctive only)": {
        "6_to_23_months": {
          "dose_mg": 2.5,
          "frequency": 1,
          "max_mg_per_day": 2.5
        },
        "2_to_5_years": {
          "dose_range_mg": [2.5, 5],
          "frequency": 1,
          "max_mg_per_day": 5
        },
        "above_5": {
          "dose_range_mg": [5, 10],
          "frequency": 1,
          "max_mg_per_day": 10
        }
      },
      "Urticaria, acute": {
        "6_to_23_months": {
          "dose_mg": 2.5,
          "frequency": 1
        },
        "2_to_5_years": {
          "dose_range_mg": [2.5, 5],
          "frequency": 1
        },
        "above_5": {
          "dose_range_mg": [5, 10],
          "frequency": 1
        }
      },
      "Urticaria, chronic spontaneous": {
        "6_to_11_months": {
          "dose_mg": 2.5,
          "frequency": 1
        },
        "12_to_23_months": {
          "initial_dose_mg": 2.5,
          "frequency": 1,
          "max_frequency": 2,
          "max_mg_per_day": 5
        },
        "2_to_5_years": {
          "initial_dose_mg": 2.5,
          "frequency": 1,
          "options": [
            {"dose_mg": 2.5, "frequency": 2},
            {"dose_mg": 5, "frequency": 1}
          ],
          "max_mg_per_day": 5
        },
        "6_to_11_years": {
          "dose_mg": 5,
          "frequency_options": [1, 2]
        },
        "above_or_equal_12": {
          "dose_mg": 10,
          "frequency": 1
        }
      }
    },
    "common_indications": [
      "Allergic rhinitis, perennial",
      "Allergic symptoms, hay fever",
      "Anaphylaxis (adjunctive only)",
      "Urticaria, acute",
      "Urticaria, chronic spontaneous"
    ]
    },
    "Hydroxyzine": {
        "concentration_mg_per_ml": 10 / 5 ,
        "bottle_size_ml": 60,
        "indications": {
        "Anxiety": {
            "under_6": {
            "dose_mg": 12.5,
            "frequency": 4,
            "max_mg_per_dose": 12.5
            },
            "above_or_equal_6": {
            "dose_mg_range": [12.5, 25],
            "frequency": 4,
            "max_mg_per_dose": 25
            }
        },
        "Pruritus (age-based)": {
            "under_6": {
            "dose_mg": 12.5,
            "frequency": [3, 4],
            "max_mg_per_dose": 12.5
            },
            "above_or_equal_6": {
            "dose_mg_range": [12.5, 25],
            "frequency": [3, 4],
            "max_mg_per_dose": 25
            }
        },
        "Pruritus (weight_based)": {
            "‚â§40kg": {
                "dose_mg_per_kg_per_day": 2,
                "frequency": [6, 8],
                "max_mg_per_dose": 25
            },
            ">40kg": {
                "dose_mg_range": [25, 50],
                "frequency": [1, 2],
                "max_mg_per_dose": 50
            }
        },
        "Pruritus from opioid": {
            "all_ages": {
            "dose_mg_per_kg_per_dose": 0.5,
            "frequency": 6,
            "max_mg_per_dose": 50
            }
        },
        "Sedation": {
            "all_ages": {
            "dose_mg_per_kg": 0.6,
            "max_mg_per_dose": 100
            }
        }
        },
        "common_indications": [
        "Anxiety",
        "Pruritus (age-based)",
        "Pruritus (weight_based)",
        "Pruritus from opioid",
        "Sedation"
        ]
    },
    "Ferrous drop": {
        "concentration_mg_per_ml": 15 / 0.6 ,
        "bottle_size_ml": 15,
        "indications": {
        "Iron deficiency, treatment": {
            "all_ages": {
            "initial_dose_mg_per_kg_per_day": 3,
            "max_dose_range_mg_per_day": [60, 120],
            "usual_max_mg_per_day": 150,
            "absolute_max_mg_per_day": 200,
            "frequency": [1, 3],
            "note": "‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1‚Äì3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ; ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡∏î‡∏ã‡∏∂‡∏°‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
            }
        }
        },
        "common_indications": [
        "Iron deficiency, treatment"
        ]
    }
    }

@app.route('/')
def home():
    return 'LINE Bot is running!'

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature')
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    except Exception as e:
        logging.info(f"‚ùå Exception occurred: {e}")
        abort(400)
    return 'OK'

def send_drug_selection(event):
    carousel1 = CarouselTemplate(columns=[
        CarouselColumn(title='Amoxicillin', text='250 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Amoxicillin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Amoxicillin')]),
        CarouselColumn(title='Cephalexin', text='125 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cephalexin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cephalexin')]),
        CarouselColumn(title='Cefdinir', text='125 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cefdinir', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cefdinir')]),
        CarouselColumn(title='Cefixime', text='100 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cefixime', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cefixime')]),
        CarouselColumn(title='Augmentin', text='600 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Augmentin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Augmentin')]),
    ])
    carousel2 = CarouselTemplate(columns=[
        CarouselColumn(title='Azithromycin', text='200 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Azithromycin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Azithromycin')]),
        CarouselColumn(title='Paracetamol', text='10‚Äì15 mg/kg/dose', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Paracetamol', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Paracetamol')]),
        CarouselColumn(title='Cetirizine', text='0.25 mg/kg/day', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cetirizine', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cetirizine')]),
        CarouselColumn(title='Hydroxyzine', text='10 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Hydroxyzine', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Hydroxyzine')]),
        CarouselColumn(title='Ferrous drop', text='15 mg/0.6 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ferrous drop', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Ferrous drop')])
    ])
    messaging_api.reply_message(
    ReplyMessageRequest(
        reply_token=event.reply_token,
        messages=[
            TemplateMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å", template=carousel1),
            TemplateMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", template=carousel2)
        ]
    ))
    return

def send_indication_carousel(event, drug_name, show_all=False):
    drug_info = DRUG_DATABASE.get(drug_name)
    if not drug_info or "indications" not in drug_info:
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≤ {drug_name}")]
            )
        )
        return

    indications = drug_info["indications"]
    common = drug_info.get("common_indications", [])

    if not show_all and common:
        names_to_show = common + ["Indication ‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    else:
        names_to_show = [name for name in indications.keys() if name not in common and name != "Other"]

    columns = []

    for name in names_to_show:
        label = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
        title = name[:40] if len(name) > 40 else name

        if name != "Indication ‡∏≠‡∏∑‡πà‡∏ô‡πÜ":
            indication_info = indications[name]
            if isinstance(indication_info, list):
                text = f"{indication_info[0]['dose_mg_per_kg_per_day']} mg/kg/day"
            else:
                text = f"{indication_info['dose_mg_per_kg_per_day']} mg/kg/day"
            action_text = f"Indication: {name}"
        else:
            text = "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            action_text = f"MoreIndication: {drug_name}"

        actions = [MessageAction(label=label, text=action_text)]
        columns.append(CarouselColumn(title=title, text=text, actions=actions))

    carousel_chunks = [columns[i:i + 5] for i in range(0, len(columns), 5)]
    messages = []

    for chunk in carousel_chunks:
        try:
            messages.append(
                TemplateMessage(
                    alt_text=f"‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ {drug_name}",
                    template=CarouselTemplate(columns=chunk)
                )
            )
        except Exception as e:
            logging.info(f"‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á TemplateMessage: {e}")

    logging.info(f"üì§ ‡∏™‡πà‡∏á carousel ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(messages)} ‡∏ä‡∏∏‡∏î")
    try:
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=messages
            )
        )
        return
    except Exception as e:
        logging.info(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {e}")


def calculate_warfarin(inr, twd, bleeding):
    if bleeding == "yes":
        return "üö® ‡∏°‡∏µ major bleeding ‚Üí ‡∏´‡∏¢‡∏∏‡∏î Warfarin, ‡πÉ‡∏´‡πâ Vitamin K1"
    if inr < 1.5:
        return f"üîπ INR < 1.5 ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 10‚Äì20%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 1.1:.1f} ‚Äì {twd * 1.2:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 1.5 <= inr <= 1.9:
        return f"üîπ INR 1.5‚Äì1.9 ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 5‚Äì10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 1.05:.1f} ‚Äì {twd * 1.10:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 2.0 <= inr <= 3.0:
        return "‚úÖ INR 2.0‚Äì3.0 ‚Üí ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÄ‡∏î‡∏¥‡∏°"
    elif 4.0 <= inr <= 4.9:
        return f"‚ö†Ô∏è INR 4.0‚Äì4.9 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ 1 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 0.9:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    else:
        return "üö® INR ‚â• 5.0 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡πâ Vitamin K"

def calculate_dose(drug, indication, weight):
    drug_info = DRUG_DATABASE.get(drug)
    if not drug_info:
        return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ {drug}"

    indication_info = drug_info["indications"].get(indication)
    if not indication_info:
        return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö indication {indication} ‡πÉ‡∏ô {drug}"

    conc = drug_info["concentration_mg_per_ml"]
    bottle_size = drug_info["bottle_size_ml"]
    total_ml = 0
    reply_lines = [f"{drug} - {indication} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {weight} kg):"]

    # ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ indication ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏ã‡πâ‡∏≠‡∏ô (sub-indications)
    if all(isinstance(v, dict) for v in indication_info.values()):
        for sub_ind, sub_info in indication_info.items():
            dose_per_kg = sub_info["dose_mg_per_kg_per_day"]
            freqs = sub_info["frequency"] if isinstance(sub_info["frequency"], list) else [sub_info["frequency"]]
            days = sub_info["duration_days"]
            max_mg_day = sub_info.get("max_mg_per_day")
            max_mg_per_dose = sub_info.get("max_mg_per_dose")
            note = sub_info.get("note")

            if isinstance(dose_per_kg, list):
                min_dose, max_dose = dose_per_kg
                min_total_mg_day = weight * min_dose
                max_total_mg_day = weight * max_dose

                if max_mg_day:
                    min_total_mg_day = min(min_total_mg_day, max_mg_day)
                    max_total_mg_day = min(max_total_mg_day, max_mg_day)

                ml_per_day_min = min_total_mg_day / conc
                ml_per_day_max = max_total_mg_day / conc
                ml_total = ml_per_day_max * days
                total_ml += ml_total

                min_freq = min(freqs)
                max_freq = max(freqs)
                reply_lines.append(
                    f"üìå {sub_ind}: {min_dose} ‚Äì {max_dose} mg/kg/day ‚Üí {min_total_mg_day:.0f} ‚Äì {max_total_mg_day:.0f} mg/day ‚âà "
                    f"{ml_per_day_min:.1f} ‚Äì {ml_per_day_max:.1f} ml/day, ‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {min_freq} ‚Äì {max_freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á √ó {days} ‡∏ß‡∏±‡∏ô "
                    f"(‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_day_max / max_freq:.1f} ‚Äì {ml_per_day_min / min_freq:.1f} ml)"
                )
            else:
                total_mg_day = weight * dose_per_kg
                if max_mg_day:
                    total_mg_day = min(total_mg_day, max_mg_day)
                ml_per_day = total_mg_day / conc
                ml_total = ml_per_day * days
                total_ml += ml_total

                if len(freqs) == 1:
                    freq = freqs[0]
                    ml_per_dose = ml_per_day / freq
                    if max_mg_per_dose:
                        ml_per_dose = min(ml_per_dose, max_mg_per_dose / conc)
                    reply_lines.append(
                        f"üìå {sub_ind}: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.0f} mg/day ‚âà {ml_per_day:.1f} ml/day, "
                        f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_dose:.1f} ml √ó {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô √ó {days} ‡∏ß‡∏±‡∏ô"
                    )
                else:
                    min_freq = min(freqs)
                    max_freq = max(freqs)
                    reply_lines.append(
                        f"üìå {sub_ind}: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.0f} mg/day ‚âà {ml_per_day:.1f} ml/day, "
                        f"‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {min_freq} ‚Äì {max_freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á √ó {days} ‡∏ß‡∏±‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_day / max_freq:.1f} ‚Äì {ml_per_day / min_freq:.1f} ml)"
                    )

            if note:
                reply_lines.append(f"üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {note}")

    # ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô (list)
    elif isinstance(indication_info, list):
        for phase in indication_info:
            title = get_indication_title(phase)
            if title:
                reply_lines.append(f"\nüîπ {title}")
            dose_per_kg = phase["dose_mg_per_kg_per_day"]
            freqs = phase["frequency"] if isinstance(phase["frequency"], list) else [phase["frequency"]]
            days = phase["duration_days"]
            max_mg_day = phase.get("max_mg_per_day")

            total_mg_day = weight * dose_per_kg
            if max_mg_day:
                total_mg_day = min(total_mg_day, max_mg_day)

            ml_per_day = total_mg_day / conc
            ml_phase = ml_per_day * days
            total_ml += ml_phase

            if len(freqs) == 1:
                freq = freqs[0]
                ml_per_dose = ml_per_day / freq
                if "max_mg_per_dose" in phase:
                    ml_per_dose = min(ml_per_dose, phase["max_mg_per_dose"] / conc)
                reply_lines.append(
                    f"üìÜ {phase['day_range']}: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.0f} mg/day ‚âà {ml_per_day:.1f} ml/day, "
                    f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_dose:.1f} ml √ó {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô √ó {days} ‡∏ß‡∏±‡∏ô"
                )
            else:
                min_freq = min(freqs)
                max_freq = max(freqs)
                reply_lines.append(
                    f"üìÜ {phase['day_range']}: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.0f} mg/day ‚âà {ml_per_day:.1f} ml/day, "
                    f"‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {min_freq} ‚Äì {max_freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á √ó {days} ‡∏ß‡∏±‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_day / max_freq:.1f} ‚Äì {ml_per_day / min_freq:.1f} ml)"
                )

    # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ indication ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    else:
        dose_per_kg = indication_info["dose_mg_per_kg_per_day"]
        freqs = indication_info["frequency"] if isinstance(indication_info["frequency"], list) else [indication_info["frequency"]]
        days = indication_info["duration_days"]
        max_mg_day = indication_info.get("max_mg_per_day")

        if isinstance(dose_per_kg, list):
            min_dose, max_dose = dose_per_kg
            min_total_mg_day = weight * min_dose
            max_total_mg_day = weight * max_dose

            if max_mg_day:
                min_total_mg_day = min(min_total_mg_day, max_mg_day)
                max_total_mg_day = min(max_total_mg_day, max_mg_day)

            ml_per_day_min = min_total_mg_day / conc
            ml_per_day_max = max_total_mg_day / conc
            total_ml = ml_per_day_max * days

            min_freq = min(freqs)
            max_freq = max(freqs)
            reply_lines.append(
                f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {min_dose} ‚Äì {max_dose} mg/kg/day ‚Üí {min_total_mg_day:.0f} ‚Äì {max_total_mg_day:.0f} mg/day ‚âà "
                f"{ml_per_day_min:.1f} ‚Äì {ml_per_day_max:.1f} ml/day, ‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {min_freq} ‚Äì {max_freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á √ó {days} ‡∏ß‡∏±‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_day_max / max_freq:.1f} ‚Äì {ml_per_day_min / min_freq:.1f} ml)"
            )
        else:
            total_mg_day = weight * dose_per_kg
            if max_mg_day:
                total_mg_day = min(total_mg_day, max_mg_day)

            ml_per_day = total_mg_day / conc
            total_ml = ml_per_day * days

            if len(freqs) == 1:
                freq = freqs[0]
                ml_per_dose = ml_per_day / freq
                if "max_mg_per_dose" in indication_info:
                    ml_per_dose = min(ml_per_dose, indication_info["max_mg_per_dose"] / conc)
                reply_lines.append(
                    f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.0f} mg/day ‚âà {ml_per_day:.1f} ml/day, "
                    f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_dose:.1f} ml √ó {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô √ó {days} ‡∏ß‡∏±‡∏ô"
                )
            else:
                min_freq = min(freqs)
                max_freq = max(freqs)
                reply_lines.append(
                    f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.0f} mg/day ‚âà {ml_per_day:.1f} ml/day, "
                    f"‡πÅ‡∏ö‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {min_freq} ‚Äì {max_freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á √ó {days} ‡∏ß‡∏±‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{ml_per_day / max_freq:.1f} ‚Äì {ml_per_day / min_freq:.1f} ml)"
                )

        note = indication_info.get("note")
        if note:
            reply_lines.append(f"\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {note}")

    bottles = math.ceil(total_ml / bottle_size)
    reply_lines.append(f"\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_ml:.1f} ml ‚Üí ‡∏à‡πà‡∏≤‡∏¢ {bottles} ‡∏Ç‡∏ß‡∏î ({bottle_size} ml)")
    return "\n".join(reply_lines)

def calculate_special_drug(user_id, drug, weight, age):
    info = SPECIAL_DRUGS[drug]
    indication = user_drug_selection.get(user_id, {}).get("indication")

    if drug == "Hydroxyzine" and indication == "Pruritus (weight_based)":
        data = info["indications"][indication]
        if weight <= 40:
            profile = data["\u226440kg"]  # ‚â§ = less than or equal to
            dose_per_kg = profile["dose_mg_per_kg_per_day"]
            freqs = profile["frequency"] if isinstance(profile["frequency"], list) else [profile["frequency"]]
            max_dose = profile["max_mg_per_dose"]

            total_mg_day = weight * dose_per_kg
            reply_lines = [f"{drug} - {indication} (\u226440kg):"]
            for freq in freqs:
                dose_per_time = min(total_mg_day / freq, max_dose)
                reply_lines.append(f"üíä {total_mg_day:.1f} mg/day ‚Üí {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô ‚Üí ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{dose_per_time:.1f} mg")
            return "\n".join(reply_lines)

        else:
            profile = data[">40kg"]
            dose_range = profile["dose_mg_range"]
            freqs = profile["frequency"] if isinstance(profile["frequency"], list) else [profile["frequency"]]
            max_dose = profile["max_mg_per_dose"]

            reply_lines = [f"{drug} - {indication} (>40kg):"]
            for freq in freqs:
                for dose in dose_range:
                    dose_per_time = min(dose, max_dose)
                    reply_lines.append(f"üíä {dose_per_time:.1f} mg √ó {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")
            return "\n".join(reply_lines)
    
    if drug == "Cetirizine":
        indication_info = info["indications"].get(indication)
        if not indication_info:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ {indication}"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö age_group ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        possible_groups = indication_info.keys()
        
        age_group = None
        if age < 1:
            age_group = "6_to_11_months"
        elif 1 <= age < 2:
            age_group = "12_to_23_months"
        elif 2 <= age <= 5 and "2_to_5_years" in possible_groups:
            age_group = "2_to_5_years"
        elif 6 <= age <= 11 and "6_to_11_years" in possible_groups:
            age_group = "6_to_11_years"
        elif age >= 12 and "above_or_equal_12" in possible_groups:
            age_group = "above_or_equal_12"
        elif age > 5 and "above_5" in possible_groups:
            age_group = "above_5"

        group_data = indication_info.get(age_group)
        if not group_data:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏≠‡∏≤‡∏¢‡∏∏ {age} ‡∏õ‡∏µ)"

        lines = [f"{drug} - {indication} (‡∏≠‡∏≤‡∏¢‡∏∏ {age} ‡∏õ‡∏µ):"]
        if "dose_mg" in group_data:
            lines.append(f"üíä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {group_data['dose_mg']} mg √ó {group_data['frequency']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")
        elif "initial_dose_mg" in group_data:
            options = group_data.get("options", [])
            lines.append(f"üíä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {group_data['initial_dose_mg']} mg √ó {group_data['frequency']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")
            for opt in options:
                lines.append(f"‡∏´‡∏£‡∏∑‡∏≠: {opt['dose_mg']} mg √ó {opt['frequency']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")
        elif "dose_range_mg" in group_data:
            for dose in group_data["dose_range_mg"]:
                lines.append(f"üíä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {dose} mg √ó {group_data['frequency']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")
        elif "dose_mg_range" in group_data:
            for dose in group_data["dose_mg_range"]:
                lines.append(f"üíä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {dose} mg √ó {group_data['frequency']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")
        elif "dose_mg" in group_data and "frequency_options" in group_data:
            for freq in group_data["frequency_options"]:
                lines.append(f"üíä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {group_data['dose_mg']} mg √ó {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô")

        return "\n".join(lines)
    
    if drug == "Ferrous drop":
        indication_info = info["indications"][indication]["all_ages"]
        dose_per_kg = indication_info["initial_dose_mg_per_kg_per_day"]
        freqs = indication_info["frequency"]
        max_range = indication_info["max_dose_range_mg_per_day"]
        usual_max = indication_info.get("usual_max_mg_per_day")
        absolute_max = indication_info.get("absolute_max_mg_per_day")

        total_mg_day = weight * dose_per_kg
        total_mg_day = min(max(total_mg_day, max_range[0]), max_range[1])
        if absolute_max:
            total_mg_day = min(total_mg_day, absolute_max)

        reply_lines = [f"{drug} - {indication} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {weight} kg):"]
        reply_lines.append(f"üíä {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.1f} mg/day")

        for freq in freqs:
            reply_lines.append(f"‚Üí {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô ‚Üí ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{(total_mg_day / freq):.1f} mg")

        if "note" in indication_info:
            reply_lines.append(f"\nüìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {indication_info['note']}")

        return "\n".join(reply_lines)

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô Paracetamol (‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
    indication_info = next(iter(info["indications"].values()))
    for entry in indication_info:
        if entry["min_age_years"] <= age < entry["max_age_years"]:
            dose_per_kg = entry["dose_mg_per_kg_per_day"]
            freq = entry["frequency"]
            duration = entry["duration_days"]
            max_dose = entry["max_mg_per_dose"]

            total_mg_day = weight * dose_per_kg
            dose_per_time = min(total_mg_day / freq, max_dose)

            return (
                f"{drug} (‡∏≠‡∏≤‡∏¢‡∏∏ {age} ‡∏õ‡∏µ, ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {weight} kg):\n"
                f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤: {dose_per_kg} mg/kg/day ‚Üí {total_mg_day:.1f} mg/day\n"
                f"‡πÅ‡∏ö‡πà‡∏á {freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô ‚Üí ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ~{dose_per_time:.1f} mg ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {duration} ‡∏ß‡∏±‡∏ô"
            )

    return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ {age} ‡∏õ‡∏µ‡πÉ‡∏ô {drug}"


def send_special_indication_carousel(event, drug_name):
    drug_info = SPECIAL_DRUGS.get(drug_name)
    if not drug_info or "indications" not in drug_info:
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á {drug_name}")]
            )
        )
        return

    indications = drug_info["indications"]
    common = drug_info.get("common_indications", [])

    names_to_show = common
    columns = []

    for name in names_to_show:
        title = name[:40]
        indication_info = indications[name]

        try:
            if isinstance(indication_info, list):
                dose = indication_info[0].get("dose_mg_per_kg_per_day") or "?"
            elif isinstance(indication_info, dict):
                # ‡∏´‡∏≤ dose ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
                sample_group = next(iter(indication_info.values()))
                if isinstance(sample_group, dict):
                    dose = sample_group.get("dose_mg") or sample_group.get("initial_dose_mg") \
                        or sample_group.get("dose_mg_range", ["?"])[0] \
                        or sample_group.get("dose_range_mg", ["?"])[0]
                else:
                    dose = "?"
            else:
                dose = "?"
        except Exception as e:
            dose = "?"

        columns.append(CarouselColumn(
            title=title,
            text=f"{dose} mg",
            actions=[MessageAction(label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", text=f"Indication: {name}")]
        ))


    carousel_template = CarouselTemplate(columns=columns)
    messages = [TemplateMessage(
        alt_text=f"‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ {drug_name}",
        template=carousel_template
    )]

    messaging_api.reply_message(
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=messages
        )
    )
    return

def get_indication_title(indication_dict):
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á indication ‡∏à‡∏≤‡∏Å key ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÄ‡∏ä‡πà‡∏ô label, sub_indication, title, name
    """
    for key in ["label", "sub_indication", "title", "name"]:
        if key in indication_dict:
            return indication_dict[key]
    return None

def create_quick_reply_items(drug, drug_info):
    items = []

    for indication_name, entry in drug_info["indications"].items():
        if isinstance(entry, list):
            for idx, sub in enumerate(entry):
                title = get_indication_title(sub) or f"{indication_name} #{idx+1}"
                label = title[:20]  # LINE ‡∏à‡∏≥‡∏Å‡∏±‡∏î label ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                items.append(
                    QuickReplyButton(
                        action=PostbackAction(
                            label=label,
                            data=f"{drug}|{indication_name}|{idx}"
                        )
                    )
                )
        else:
            label = indication_name[:20]
            items.append(
                QuickReplyButton(
                    action=PostbackAction(
                        label=label,
                        data=f"{drug}|{indication_name}|0"
                    )
                )
            )
    return items


def get_indication_entry(drug, indication_name, entry_index=0):
    entries = DRUG_DATABASE[drug]["indications"][indication_name]
    if isinstance(entries, list):
        return entries[int(entry_index)]
    return entries

@handler.add(MessageEvent)
def handle_message(event: MessageEvent):
    if not isinstance(event.message, TextMessageContent):
        return
    user_id = event.source.user_id
    text = event.message.text.strip()
    text_lower = text.lower()

    if text_lower in ['‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤ warfarin']:
        user_sessions.pop(user_id, None)
        user_drug_selection.pop(user_id, None)
        user_sessions[user_id] = {"flow": "warfarin", "step": "ask_inr"}
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text="üß™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ INR (‡πÄ‡∏ä‡πà‡∏ô 2.5)")]
            )
        )
        return

    elif text_lower in ['‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÄ‡∏î‡πá‡∏Å', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤‡πÄ‡∏î‡πá‡∏Å']:
        user_sessions.pop(user_id, None)
        user_drug_selection.pop(user_id, None)
        user_ages.pop(user_id, None)
        send_drug_selection(event)
        return
    
    # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô Warfarin flow
    if user_id in user_sessions:
        session = user_sessions[user_id]
        if session.get("flow") == "warfarin":
            step = session.get("step")
            if step == "ask_inr":
                try:
                    session["inr"] = float(text)
                    session["step"] = "ask_twd"
                    reply = "üìà ‡πÉ‡∏™‡πà Total Weekly Dose (TWD) ‡πÄ‡∏ä‡πà‡∏ô 28"
                except:
                    reply = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ INR ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 2.5"
                messaging_api.reply_message(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=reply)]
                    )
                )
                return
            elif step == "ask_twd":
                try:
                    session["twd"] = float(text)
                    session["step"] = "ask_bleeding"
                    reply = "ü©∏ ‡∏°‡∏µ major bleeding ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (yes/no)"
                except:
                    reply = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ TWD ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 28"
                messaging_api.reply_message(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=reply)]
                    )
                )
                return
            elif step == "ask_bleeding":
                if text.lower() not in ["yes", "no"]:
                    reply = "‚ùå ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ yes ‡∏´‡∏£‡∏∑‡∏≠ no ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                else:
                    result = calculate_warfarin(session["inr"], session["twd"], text.lower())
                    user_sessions.pop(user_id, None)  # ‡∏à‡∏ö session
                    reply = result
                messaging_api.reply_message(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=reply)]
                    )
                )
                return

    if text == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà":
        user_drug_selection.pop(user_id, None)
        user_ages.pop(user_id, None)
        send_drug_selection(event)
        return

    if text.startswith("MoreIndication:"):
        drug_name = text.replace("MoreIndication:", "").strip()
        send_indication_carousel(event, drug_name, show_all=True)
        return

    if text.startswith("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤:"):
        drug_name = text.replace("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤:", "").strip()
        user_drug_selection[user_id] = {"drug": drug_name}

        if drug_name in DRUG_DATABASE:
            send_indication_carousel(event, drug_name)
        else:
            send_special_indication_carousel(event, drug_name)
        return

    if text.startswith("Indication:") and user_id in user_drug_selection:
        indication = text.replace("Indication:", "").strip()
        user_drug_selection[user_id]["indication"] = indication
        drug = user_drug_selection[user_id].get("drug")

        if user_id in user_ages:
            user_ages.pop(user_id)

        if drug in SPECIAL_DRUGS:
            example_age = round(random.uniform(1, 18), 1)
            messaging_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="üìÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å ‡πÄ‡∏ä‡πà‡∏ô {example_age} ‡∏õ‡∏µ")]
                )
            )
        else:
            example_weight = round(random.uniform(5.0, 20.0), 1)
            messaging_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ {indication} ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡πÄ‡∏ä‡πà‡∏ô {example_weight}")]
                )
            )
        return
    
    if user_id in user_drug_selection:

        # üõ† ‡πÅ‡∏Å‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏: ‡πÉ‡∏ä‡πâ .group(0) ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà try-except
        text_lower = text.lower()

        if any(kw in text_lower for kw in ["‡∏≠‡∏≤‡∏¢‡∏∏", "‡∏õ‡∏µ", "y", "‡∏Ç‡∏ß‡∏ö", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "mo"]):
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                years = 0
                months = 0

                year_match = re.search(r"(\d+(?:\.\d+)?)\s*(‡∏õ‡∏µ|y|‡∏Ç‡∏ß‡∏ö)", text_lower)
                if year_match:
                    years = float(year_match.group(1))

                month_match = re.search(r"(\d+(?:\.\d+)?)\s*(‡πÄ‡∏î‡∏∑‡∏≠‡∏ô|mo)", text_lower)
                if month_match:
                    months = float(month_match.group(1))

                if not year_match and not month_match:
                    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

                age_years = round(years + months / 12, 2)

                if 0 <= age_years <= 18:
                    user_ages[user_id] = age_years
                    example_weight = round(random.uniform(5.0, 20.0), 1)
                    messaging_api.reply_message(
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=f"üéØ ‡∏≠‡∏≤‡∏¢‡∏∏ {age_years:.2f} ‡∏õ‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô {example_weight} ‡∏Å‡∏Å")]
                        )
                    )
                else:
                    messaging_api.reply_message(
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0‚Äì18 ‡∏õ‡∏µ (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ)")]
                        )
                    )
                return

            except:
                messaging_api.reply_message(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏õ‡∏µ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 2 ‡∏Ç‡∏ß‡∏ö")]
                    )
                )
                return

        if any(kw in text_lower for kw in ["‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏Å‡∏Å", "kg"]) or text.replace(".", "", 1).isdigit():
            weight_match = re.search(r"(\d+(\.\d+)?)", text)
            if weight_match:
                try:
                    weight = float(weight_match.group(1))
                except ValueError:
                    messaging_api.reply_message(
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 20 ‡∏Å‡∏Å")]
                        )
                    )

                entry = user_drug_selection[user_id]
                drug = entry.get("drug")

                if drug in SPECIAL_DRUGS:
                    age = user_ages.get(user_id)
                    if age is None:
                        # ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                        messaging_api.reply_message(
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="üìÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 5 ‡∏õ‡∏µ\n‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")]
                            )
                        )
                        return  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢
                    else:
                        try:
                            reply = calculate_special_drug(user_id, drug, weight, age)
                        except Exception as e:
                            logging.info(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô SPECIAL_DRUG: {e}")
                            reply = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤"
                else:
                    if "indication" not in entry:
                        reply = "‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'Indication: Fever'"
                    else:
                        indication = entry["indication"]
                        try:
                            reply = calculate_dose(drug, indication, weight)
                        except Exception as e:
                            logging.info(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô DRUG_DATABASE: {e}")
                            reply = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤"

                messaging_api.reply_message(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=reply)]
                    )
                )
                return

        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏≠‡∏≤‡∏¢‡∏∏" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å" ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            messaging_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏ä‡πà‡∏ô '5 ‡∏õ‡∏µ' ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô '18 ‡∏Å‡∏Å'")]
                )
            )
            return

    if user_id not in user_sessions and user_id not in user_drug_selection:
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[
                    TextMessage(text="‚ùì ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤ warfarin' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤‡πÄ‡∏î‡πá‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                ]
            )
        )
        return
        

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
    
LINE_CHANNEL_ACCESS_TOKEN = 'f9aa6b49ac00dfb359098504cffe6eab'
LINE_CHANNEL_SECRET = 'kzXIG0cO1xDAPMJaQ0NrEiufMINBbst7Z5ndou3YkPp21dJKvr3ZHIL4eeePNM2q4JPFmy+ttnGunjBPaEZ3Vl1yG3gVR8sISp/DVpy7SibXB+xoed0JZd2MmbU9qnhKkf2Eu5teI7DiM/v0DMkV7AdB04t89/1O/w1cDnyilFU='